{"version":3,"sources":["Example.tsx","ClusteringExample.tsx","App.js","index.js"],"names":["tooltipStyle","position","pointerEvents","zIndex","background","color","fontSize","borderRadius","padding","maxWidth","maxHeight","overflow","boxShadow","DARK_COLORS","flows","scheme","d3scaleChromatic","length","slice","reverse","Example","React","Component","constructor","props","super","state","tooltip","undefined","initialViewState","handleViewStateChange","viewState","onViewStateChange","this","setState","handleHighlight","highlight","info","latitude","longitude","zoom","bearing","pitch","renderTooltip","object","x","y","style","left","top","JSON","stringify","render","locations","getLocationId","getLocationCentroid","getFlowMagnitude","pickable","colors","mapStyle","animate","opacity","mixBlendMode","mapboxAccessToken","process","onHighlighted","bottom","right","ClusteringExample","clusterIndex","aggregateFlowsByZoom","availableZoomLevels","clusterZoom","Cluster","clusteredLocations","getClusterNodesFor","aggregateFlows","get","getFlowOriginId","getFlowDestId","clusterLevels","getLocationWeight","makeClusterName","id","numPoints","Map","set","maxZoom","Math","max","apply","loc","centroid","flow","origin","dest","count","Papa","parsePromise","file","Promise","complete","error","parse","download","header","dynamicTyping","skipEmptyLines","App","time","componentDidMount","all","then","travel","sa2_centroids","console","log","data","code","home_SA2","work_SA2","Total","ReactDOM","document","getElementById","write"],"mappings":"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","file":"static/js/main.342c0dc5.chunk.js","sourcesContent":["/*\n * Copyright 2019 Teralytics\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Flow, FlowAccessors, FlowLayerPickingInfo, Location, LocationAccessors } from '@flowmap.gl/core';\nimport FlowMap, { Highlight, LegendBox, LocationTotalsLegend } from '@flowmap.gl/react';\nimport React from 'react';\nimport { ViewState } from '@flowmap.gl/core';\nimport * as d3scaleChromatic from 'd3-scale-chromatic';\n\nexport const mapboxAccessToken = process.env.REACT_APP_MapboxAccessToken;\n\nexport interface Props extends FlowAccessors, LocationAccessors {\n  locations: Location[];\n  flows: Flow[];\n  onViewStateChange?: (viewState: ViewState) => void;\n}\n\ninterface State {\n  tooltip: FlowLayerPickingInfo | undefined;\n}\n\nconst tooltipStyle: React.CSSProperties = {\n  position: 'absolute',\n  pointerEvents: 'none',\n  zIndex: 1,\n  background: '#125',\n  color: '#fff',\n  fontSize: 9,\n  borderRadius: 4,\n  padding: 5,\n  maxWidth: 300,\n  maxHeight: 300,\n  overflow: 'hidden',\n  boxShadow: '2px 2px 4px #ccc',\n};\n\nconst DARK_COLORS = {\n  //darkMode: true,\n  flows: {\n    scheme: (d3scaleChromatic.schemeSpectral[d3scaleChromatic.schemeSpectral.length - 1] as string[]).slice().reverse(),\n  },\n  /*\n  locationAreas: {\n    normal: '#334',\n  },\n  outlineColor: '#000',\n  */\n};\n\nexport default class Example extends React.Component<Props, State> {\n  state: State = {\n    tooltip: undefined,\n  };\n  private readonly initialViewState: ViewState;\n\n  constructor(props: Props) {\n    super(props);\n    this.initialViewState = {\n      latitude: -41.235726,\n      longitude: 172.5118422,\n      zoom: 5,\n      bearing: 0,\n      pitch: 0\n    };\n  }\n\n  handleViewStateChange = (viewState: ViewState) => {\n    const { onViewStateChange } = this.props;\n    if (onViewStateChange) {\n      onViewStateChange(viewState);\n    }\n    const { tooltip } = this.state;\n    if (tooltip) {\n      this.setState({ tooltip: undefined });\n    }\n  };\n\n  handleHighlight = (highlight: Highlight | undefined, info: FlowLayerPickingInfo | undefined) => {\n    if (!info) {\n      this.setState({ tooltip: undefined });\n    }\n    this.setState({\n      //tooltip: info,\n    });\n  };\n\n  renderTooltip() {\n    const { tooltip } = this.state;\n    if (!tooltip) {\n      return null;\n    }\n    const { object, x, y } = tooltip;\n    if (!object) {\n      return null;\n    }\n    return (\n      <pre\n        style={{\n          ...tooltipStyle,\n          left: x,\n          top: y,\n        }}\n      >\n        {JSON.stringify(object, null, 2)}\n      </pre>\n    );\n  }\n\n  render() {\n    const { flows, locations, getLocationId, getLocationCentroid, getFlowMagnitude } = this.props;\n    return (\n      <>\n        <FlowMap\n          pickable={true}\n          initialViewState={this.initialViewState}\n          //showTotals={true}\n          //showLocationAreas={false}\n          colors={DARK_COLORS}\n          flows={flows}\n          locations={locations}\n          mapStyle=\"mapbox://styles/mapbox/dark-v10\"\n          animate={true}\n          opacity={1}\n          mixBlendMode=\"screen\"\n          mapboxAccessToken={mapboxAccessToken}\n          getLocationId={getLocationId}\n          getLocationCentroid={getLocationCentroid}\n          getFlowMagnitude={getFlowMagnitude}\n          onViewStateChange={this.handleViewStateChange}\n          onHighlighted={this.handleHighlight}\n        />\n        <LegendBox bottom={35} right={10}>\n          <LocationTotalsLegend colors={DARK_COLORS} />\n        </LegendBox>\n        {this.renderTooltip()}\n      </>\n    );\n  }\n}\n","/*\n * Copyright 2019 Teralytics\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport * as Cluster from '@flowmap.gl/cluster';\nimport { Flow, FlowAccessors, Location, LocationAccessors } from '@flowmap.gl/core';\nimport React from 'react';\nimport { ViewState } from '@flowmap.gl/core';\nimport Example from './Example';\n\nexport interface Props extends FlowAccessors, LocationAccessors {\n  flows: Flow[];\n  locations: Location[];\n  clusterLevels?: Cluster.ClusterLevel[];\n}\n\ninterface State {\n  clusteredLocations: Location[] | undefined;\n  aggregateFlows: Flow[] | undefined;\n}\n\nclass ClusteringExample extends React.Component<Props, State> {\n  private readonly clusterIndex: Cluster.ClusterIndex;\n  private readonly aggregateFlowsByZoom: Map<number, Flow[]>;\n\n  constructor(props: Props) {\n    super(props);\n    const { flows, getLocationId, getLocationCentroid, getFlowOriginId, getFlowDestId, getFlowMagnitude } = this.props;\n    let clusterLevels;\n    const locations = this.props.locations;\n    if (this.props.clusterLevels) {\n      clusterLevels = this.props.clusterLevels;\n    } else {\n      const getLocationWeight = Cluster.makeLocationWeightGetter(flows, {\n        getFlowOriginId,\n        getFlowDestId,\n        getFlowMagnitude,\n      });\n      clusterLevels = Cluster.clusterLocations(locations, { getLocationId, getLocationCentroid }, getLocationWeight, {\n        makeClusterName: (id: number, numPoints: number) => `Cluster #${id} of ${numPoints} locations`,\n      });\n    }\n    const clusterIndex = Cluster.buildIndex(clusterLevels);\n    const aggregateFlowsByZoom = new Map<number, Flow[]>();\n    for (const zoom of clusterIndex.availableZoomLevels) {\n      aggregateFlowsByZoom.set(\n        zoom,\n        clusterIndex.aggregateFlows(flows, zoom, { getFlowOriginId, getFlowDestId, getFlowMagnitude }),\n      );\n    }\n    const maxZoom = Math.max.apply(null, clusterIndex.availableZoomLevels);\n    this.clusterIndex = clusterIndex;\n    this.aggregateFlowsByZoom = aggregateFlowsByZoom;\n    this.state = {\n      clusteredLocations: this.clusterIndex.getClusterNodesFor(maxZoom),\n      aggregateFlows: this.aggregateFlowsByZoom.get(maxZoom),\n    };\n  }\n\n  handleViewStateChange = (viewState: ViewState) => {\n    const { availableZoomLevels } = this.clusterIndex;\n    const { zoom } = viewState;\n    var clusterZoom = Cluster.findAppropriateZoomLevel(availableZoomLevels, zoom);\n    if (clusterZoom === 14) clusterZoom = 13;\n    this.setState({\n      clusteredLocations: this.clusterIndex.getClusterNodesFor(clusterZoom),\n      aggregateFlows: this.aggregateFlowsByZoom.get(clusterZoom),\n    });\n  };\n\n  render() {\n    const { getFlowOriginId, getFlowDestId, getFlowMagnitude } = this.props;\n    const { clusteredLocations, aggregateFlows } = this.state;\n    if (!clusteredLocations || !aggregateFlows) {\n      return null;\n    }\n    return (\n      <Example\n        locations={clusteredLocations}\n        flows={aggregateFlows}\n        getLocationId={(loc: Cluster.ClusterNode) => loc.id}\n        getLocationCentroid={(loc: Cluster.ClusterNode) => loc.centroid}\n        getFlowOriginId={(flow: Flow) => (Cluster.isAggregateFlow(flow) ? flow.origin : getFlowOriginId(flow))}\n        getFlowDestId={(flow: Flow) => (Cluster.isAggregateFlow(flow) ? flow.dest : getFlowDestId(flow))}\n        getFlowMagnitude={(flow: Flow) => (Cluster.isAggregateFlow(flow) ? flow.count : getFlowMagnitude(flow))}\n        onViewStateChange={this.handleViewStateChange}\n      />\n    );\n  }\n}\n\nexport default ClusteringExample;\n","import React, {Component} from 'react'\nimport Papa from \"papaparse\"\nimport ClusteringExample from \"./ClusteringExample\";\n\nimport './App.css'\n\nPapa.parsePromise = function(file) {\n  return new Promise(function(complete, error) {\n    Papa.parse(file, {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      skipEmptyLines: true,\n      complete,\n      error\n    });\n  });\n};\n\nexport default class App extends Component {\n  state = {\n    locations: null,\n    flows: null,\n    time: 0\n  }\n\n  componentDidMount() {\n    \n    Promise.all([\n      Papa.parsePromise(\"https://neon-ninja.github.io/TABA/travel.csv\"),\n      Papa.parsePromise(\"https://neon-ninja.github.io/TABA/sa2_centroids.csv\")\n    ]).then(([travel, sa2_centroids]) => {\n      console.log(travel, sa2_centroids, this.state)\n      this.setState({\n        flows: travel.data,\n        locations: sa2_centroids.data\n      })\n    })\n  }\n\n  render() {\n    const { locations, flows } = this.state\n    if (locations && flows) {\n      return (\n        <ClusteringExample\n          locations={locations}\n          flows={flows}\n          getLocationId={(loc) => loc.code}\n          getLocationCentroid={(loc) => [loc.longitude, loc.latitude]}\n          getFlowOriginId={(flow) => flow.home_SA2}\n          getFlowDestId={(flow) => flow.work_SA2}\n          getFlowMagnitude={(flow) => flow.Total}\n        />\n      )\n    }\n    return null\n\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\ndocument.write(\n  `<a href=\"https://github.com/neon-ninja/TABA\">\n    <img \n      style=\"position: absolute; top: 0; right: 0; border: 0;\" \n      src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png\" \n      alt=\"Fork me on GitHub\">\n   </a>\n `\n);\n"],"sourceRoot":""}